=>Migration

.env

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=exerciseone
DB_USERNAME=root
DB_PASSWORD=komysql@123

mysql -u root -p
komysql@123 

status 

CREATE DATABASE exerciseone;

SHOW DATABASE;


database > mirgration

=>tables to update db server 
php artisan migrate


=>Create New Table 
php artisan make:migration create_students_table
php artisan make:migration create_workers_table --create="workers"



Schema::create('students', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('phonenumber');
            $table->timestamps();
        });

php artisan migrate



=>Avaliable Column Types

$table->id();
$table->bigIncrements('id');
$table->increments('id');
$table->tinyInteger('id');
$table->bigInteger('id');
$table->unsignedInteger('id');
$table->unsignedBigInteger('id');
$table->smallInteger('votes');
$table->binary('photo');
$table->boolean('confirmed');
$table->char('name',30);
$table->string('name',100);
$table->text('description');
$table->tinytext('notes');
$table->mediumtext('description');
$table->longText('post');
$table->time('bookingtime');
$table->date('created_at');
$table->year('birthyear');
$table->timestamps();  // auto
$table->timestamp();  //custom
$table->decimal('amount',precision=8,scale=2);
$table->float('measure',precision,scale);
$table->enum('payment',['visa','mpu','cod','kpay','wavepay']);
$table->json('mutiphones');



=>List all files from database > migrations files 
php artisan migrate:status


=>Undo migration 
php artisan migrate:rollback

=>Check migration Status
php artisan migrate:status




php artisan make:migration create_staffs_table --create="staffs"
php artisan make:migration create_employees_table --create="employees"


=>Undo migration by step(selected table count to local)
php artisan migrate:rollback --step=2

=>Check before rollback  table list 
php artisan migrate:rollback --pretend


=>Delete all tables (auto rollback all of the tables)
php artisan migrate:reset


php artisan make:migration create_shoppers_table --create="shoppers"


=>Delete all datas (auto rollback and auto migrate)
php artisan migrate:refresh


=>Delete all datas (auto rollback and auto migrate / selected table count to local by DESC)
php artisan migrate:refresh --step=2



=>Add New Column 
php artisan make:migration add_city_to_staffs_table --table="staffs"
$table->string('city'); to add_city_to_staffs_table 
php artisan migrate 


=>Sort Column 
php artisan migrate:rollback  --pretend 
php artisan migrate:rollbak 
$table->string('city')->after('phonenumber'); to add_city_to_staffs_table   //(there's no before)



php artisan make:migration add_city_to_employees_table --table=employees
$table->string('city')->after('phonenumber');


php artisan make:migration add_city_to_staffs_table --table="staffs"
$table->string('city'); to add_city_to_staffs_table 
=>down 
$table->string('city');


php artisan migrate 
php artisan migrate:status 
php artisan migrate:rollback --pretend 
php artisan migrate:rollback 
php artisan migrate:migrate


=>Drop Columns 
php artisan make:migration remove_id_to_students_table --table=students
=>up 
$table->dropColumn('id');



php artisan make:migration remove_id_to_staffs_table --table=staffs
=>up 
$table->dropColumn('id');
=>down 
$table->id()



php artisan make:migration remove_id_to_staffs_table --table=staffs
=>up 

    if(Schema::hasColumn('staffs','id')){
        Schema::table('staffs', function(Blueprint $table){
            $table->dropColumn('id');
        });
    }

=>down 
$table->id()->first();








=>Rename Columns renameColumn(from,to)
php artisan make:migration rename_students_column --table=students
=>up 
$table->renameColumn('phonenumber','phone');
$table->renameColumn('address','city');
=>down 
$table->renameColumn('phone','phonenumber');
$table->renameColumn('city','address');

php artisan migrate 
php artisan migrate:status 
php artisan migrate:rollback --pretend 
php artisan migrate:rollback 
php artisan migrate:migrate




=>Rename Table  rename(from,to)
php artisan make:migration rename_employees_to_customers_table --table=employees
=>up 
Schema::rename('employees','customers');
=>down 
Schema::rename('customers','employees');

php artisan migrate 
php artisan migrate:status 
php artisan migrate:rollback --pretend 
php artisan migrate:rollback 
php artisan migrate:migrate



=>Default value

php artisan make:migration create_books_table --create="books"


Schema::create('books', function (Blueprint $table) {
            $table->increments('id');
            $table->string('title');
            $table->tinyInterger('status')->default('1');
            $table->enum('copyright',['0','1'])->default('0');
            $table->timestamp('created_at')->default(DB::raw('CURRENT_TIMESTAMP'));  //timestamp not inculde s
            $table->timestamp('upated_at')->default(DB::raw('CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP'));
        });


php artisan make:migration create_profiles_table --create="profiles"

Schema::create('profiles', function (Blueprint $table) {
            $table->increments('id');
            $table->string('givename',100);
            $table->string('familyname',100);
            $table->enum('gender',array('male','female','unisex'))->default('female');
            $table->text('bio');
            $table->unsignedBigInterger('user_id');
            $table->timestamp('created_at')->useCurrent();
            $table->timestamp('updated_at')->nullable()->useCurrentOnUpdate();
        });





=>Creating Indexes

$table->string('email')->unique();

php artisan make:migration create_authors_table --create="authors"
 Schema::create('authors', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->timestamps();
        });

php artisan make:migration create_types_table --create="types"
 Schema::create('types', function (Blueprint $table) {
            $table->increments('id');
            $table->string('name');
            $table->timestamps();
        });

php artisan make:migration create_posts_table --create="posts"
 Schema::create('posts', function (Blueprint $table) {
            $table->increments('id');
            $table->string('title')->unique();
            $table->text('description');
            $table->unsignedBigInteger('user_id');
            $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');
            $table->foreign('author_id')->references('id')->on('authors')->onUpdate('cascade')->onDelete('cascade');
            $table->year('year');
            $table->unsignedBigInteger('type_id');
            $table->foreign('type_id')->references('id')->on('types')->onUpdate('cascade')->onDelete('cascade');
            $table->timestamps();
        });


=Foreign Key Constraints
 Method  1 
$table->unsignedBigInterger('user_id');
$table->foregin('user_id')->refernces('id')->on('users');

Method  2
$table->foreginId('user_id')->constrained('users');


=>Data Insert From Route 

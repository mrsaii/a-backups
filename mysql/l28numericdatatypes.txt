=>Data Types ( Base on Version 8.0 )

*Numeric Data Types (types)


Data Types 							Description
	
1. BIT(size)						A bit-value type. from 1 to 64. The default value for size is 1.					

2. BOOL								Zero is considered as false, Non-Zore values are considered as true.			
3. BOOLEAN							Equal to BOOL

4. TINYINT(size)					A very small integer. Signed range is from -128 to 127. Unsigned range is 0 to 255.
5. SMALLINT(size)					A small integer. Signed range is from -32768 to 32767. Unsigned range is 0 to 65535.			
6. MEDIUMINT(size)					A mediumn integer. Signed range is from -8388608 to 8388607. Unsigned range is 0 to 16777215.
7. INT  							Signed range is from -214748648 to 214748647. Unsigned range is 0 to 4294967195
8. INTERGET(size) 					Equal to INT
9. BITINT(size)						A large interger.

10. DECIMAL(size,d)					An exact fixed-point number. The default value for d  is 0.  eg:(999.99) is 5 digits and 2 decimal digits
11. DEC(size,d)						Equal to DECIMAL(size,d)
12. FLOAT(size,d)					A floating point number (Approximate Value)
13. FLOAT(p)						A floating point number (Approximate Value). p is opitonal. p is from 0 to 24
14. DOUBLE(size,d)					p is opitonal. p is from 25 to 53

NOTE :	DECIMAL for finance ( such as money )
		FLOAT & DOUBLE for science app 

---------------------------------------------------------

=EXERCISE


CREATE TABLE IF NOT EXISTS items(
	name VARCHAR(20),
	price INT(11),
	status BOOL
);

DESC items;

INSERT INTO items(name,price)
VALUES ('water',100),
('coffee',500),
('cake',800),
('snack',250.56),
('jam',1000);

SELECT * FROM items;


INSERT INTO items(name,price,status)
VALUES ('water',100,0),
('coffee',500,1),
('cake',800,0),
('snack',250.56,1),
('jam',1000,0);

SELECT * FROM items;

DROP TABLE IF EXISTS items;

CREATE TABLE IF NOT EXISTS items(
       name VARCHAR(20),
       purchaseprice INT(4) SIGNED,
       sellprice INT(4) UNSIGNED,
       status BOOL
);

DESC items;

INSERT INTO items(name,purchaseprice,sellprice,status)
VALUES('water',900,9500,0),
('coffee',-500,200,1),
('cake',800,1000,0),
('snack',-250.56,350.77,1),
('jam',1000,2000,0);


INSERT INTO items(name,purchaseprice,sellprice,status)
VALUES('water',10000,11000,0),
('coffee',-100,200,1);

SELECT * FROM items;

SELECT * FROM items;

INSERT INTO items(name,purchaseprice,sellprice,status)
VALUES('water',10000,-11000,0),
('coffee',-100,200,1);

SELECT * FROM items;

--------------------------------------------------------------------------

									number data type

				interger 			fixed-point 	VS 		floating-point
				INTERGER 			DECIMAL 				FLOAT/DOUBLE

DECIMAL(5,2) 	DECIMAL(Total Number of Digits, Digits after decimal)
eg (999.99) is 5 digits and 2 decimal digits

fixed-point data type
DECIMAL(5,3) = 20.234
20.5 = 20.500
20.52354987 = 20.524 (warning)


DROP TABLE IF EXISTS items;


CREATE TABLE IF NOT EXISTS items(
	name VARCHAR(20),
	price DECIMAL(6,2)
);

DESC items;

*result 500.00
INSERT INTO items(name,price)
VALUE ('water',500);

*result 100.43
INSERT INTO items(name,price)
VALUE ('water',100.43);

*result 1000.01
INSERT INTO items(name,price)
VALUE ('water',1000.01);

*result 1000.99
INSERT INTO items(name,price)
VALUE ('water',1000.99);

SELECT * FROM items;

*result 1000.99
INSERT INTO items(name,price)
VALUE ('water',1000.994);

SELECT * FROM items;

*result 1000.99
INSERT INTO items(name,price)
VALUE ('water',1000.9948);

SELECT * FROM items;

*result 1001.00
INSERT INTO items(name,price)
VALUE ('water',1000.998);

SELECT * FROM items;

*result 1000.35
INSERT INTO items(name,price)
VALUE ('water',1000.345);

SELECT * FROM items;


*result 551.00
INSERT INTO items(name,price)
VALUE ('redbull',550.9999);

SELECT * FROM items;


*result error
INSERT INTO items(name,price)
VALUE ('redbull',100000);

SELECT * FROM items;


-------------------------------------------------------------------------------

FLOAT() VS DOUBLE()

Note : DECIMAL data type is a fixed-point type and calculate are exact
Note : FLOAT & DOUBLE data type are floating-point types and calculation are apporximate.



CREATE TABLE IF NOT EXISTS shoppings(
	name VARCHAR(20),
	purchaseprice FLOAT,
	sellprice FLOAT(4)	
);

DESC shoppings;

INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUES ('water',100,100),
	('coffee',500,500.34),
	('cake',800,800.56),
	('snack',250,250.889),
	('jam',9000,10000);

SELECT * FROM shoppings;



*result = 112233
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',112233.45,112233.45);

SELECT * FROM shoppings;

*result = 11223300
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUE ('royal birdnest',11223344.45,11223344.45);

SELECT * FROM shoppings;


*result = 1122330000
INSERT INTO shoppings(name,purchaseprice,sellprice)
VALUE ('royal birdnest',1122334455.45,1122334455.45);

SELECT * FROM shoppings;

------------------------------------------------------------------------

=> FLOAT vs DOUBLE

CREATE TABLE IF NOT EXISTS buyings(
	name VARCHAR(20),
	purchaseprice FLOAT,
	sellprice DOUBLE
);

DESC buyings;


INSERT INTO buyings(name,purchaseprice,sellprice)
VALUES ('water',100,100),
	('coffee',500.34,500.34),
	('cake',800.56,800.56),
	('snack',250.889,250.889),
	('jam',1000,10000);

SELECT * FROM buyings;


*result = 112233  112233.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',112233.45,112233.45);

SELECT * FROM buyings;


*result = 11223300  11223344.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',11223344.45,11223344.45);

SELECT * FROM buyings;


*result = 1122330000  1122334455.45
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',1122334455.45,1122334455.45);

SELECT * FROM buyings;


*result = 1.12233e15  1122334455667788.5
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',1122334455667788.45,1122334455667788.45);

SELECT * FROM buyings;


*result = 1.12233e17  1.122334455667789e17
INSERT INTO buyings(name,purchaseprice,sellprice)
VALUE ('brands birdnest',112233445566778899.45,112233445566778899.45);

SELECT * FROM buyings;

=> About e/E
HTML input number type allow 'e/E' buz 'e' stands for exponential (exponent) which is a numeric symbol.
Eg, 200000 can also can be written as 2e5. (3e4 = 3x10^4 = 30000)
^ (is call )

